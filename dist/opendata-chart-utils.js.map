{"version":3,"file":"opendata-chart-utils.js","sources":["../src/field/is-numeric-type.js","../src/date/get-periodic-time-interval.js","../src/field/should-chart-attribute.js","../src/index.js"],"sourcesContent":["/*\n* Is a field numeric?\n* @param {string} type - Input esri field type\n* @return {boolean} - Yes/no on if field is numeric\n*/\nexport default function isNumericType (type) {\n  // NOTE: type can be one of the following:\n  // \"esriFieldTypeSmallInteger\", \"esriFieldTypeInteger\", \"esriFieldTypeSingle\", \"esriFieldTypeDouble\",\n  // \"esriFieldTypeString\",\n  // \"esriFieldTypeDate\",\n  // \"esriFieldTypeOID\", \"esriFieldTypeGlobalID\",\n  // \"esriFieldTypeGeometry\", \"esriFieldTypeBlob\", \"esriFieldTypeRaster\", \"esriFieldTypeGUID\", \"esriFieldTypeXML\"\n  const numericTypes = ['esriFieldTypeSmallInteger', 'esriFieldTypeInteger', 'esriFieldTypeSingle', 'esriFieldTypeDouble', 'esriFieldTypeFloat'];\n  return numericTypes.indexOf(type) > -1;\n}\n","import moment from 'moment';\n/**\n * How to get Periodic time intervals\n *\n  * @param {date} startDate - Starting date\n  * @param {date} endDate - Ending date\n  * @returns {string} or {null} - Returns type of time interval or null\n */\nexport default function getPeriodicTimeInterval (startDate, endDate) {\n   // Make our start / ends be wrapped in moment for comparison logic\n  const start = moment(startDate);\n  const end = moment(endDate);\n\n  if (!shouldCalcDates(startDate, endDate)) { return null; }\n\n  if (calcDiffInDates(end, start, 'year') <= 25 && calcDiffInDates(end, start, 'month') > 12) {\n    return 'year';\n  } else if (calcDiffInDates(end, start, 'month') <= 12 && calcDiffInDates(end, start, 'day') > 31) {\n    return 'month';\n  } else if (calcDiffInDates(end, start, 'day') <= 31 && calcDiffInDates(end, start, 'hour') > 24) {\n    return 'day';\n  } else if (calcDiffInDates(end, start, 'hour') <= 24 && calcDiffInDates(end, start, 'minute') > 30) {\n    return 'hour';\n  } else if (calcDiffInDates(end, start, 'minute') <= 30 && calcDiffInDates(end, start, 'second') > 30) {\n    return 'minute';\n  } else if (calcDiffInDates(end, start, 'second') <= 30 && calcDiffInDates(end, start, 'second') > 1) {\n    return 'second';\n  }\n\n  return null;\n}\n\n// Determine the differences in dates. True is needed to calc as a float.\nfunction calcDiffInDates (end, start, measureOfTime) {\n  return end.diff(start, measureOfTime, true);\n}\n\n// Should we calc a time interval even?\nfunction shouldCalcDates (start, end) {\n  // if either date is invalid return null\n  if (!validDate(start) || !validDate(end)) { return null; }\n  // if the start date is after the end date return null\n  if (!startDateAfterEndDate(start, end)) { return null; }\n  return true;\n}\n\n// Is the date valid? new Date() because moment doesn't recognize datetime objects otherwise\nfunction validDate (date) {\n  return moment.isDate(new Date(date));\n}\n\n// Is the start date after the end date?\nfunction startDateAfterEndDate (start, end) {\n  return moment(start).isBefore(end);\n}\n","import getPeriodicTimeInterval from '../date/get-periodic-time-interval';\nimport isNumericType from './is-numeric-type';\n\n/**\n * Should a chart attribute be allowed to be chartable\n * @param  {string} fieldType What is the field type?\n * @param  {object} stats     The stats object as passed in\n * @param  {object} options   Options (maxCount, advancedQueryCapabilities)\n * @return {boolean}           Yes/no on chartability\n */\nexport default function shouldChartAttribute (fieldType, stats, options) {\n  // set default options\n  let defaultOptions = {\n    maxCount: 20,\n    maxRecordCount: 10001,\n    recordCount: 10002,\n    advancedQueryCapabilities: false\n  };\n  // Merge defaults and actual options object\n  let internalOptions = Object.assign({}, defaultOptions, options);\n\n  // If stats are undefined just exit immediately\n  if (!stats) {\n    return false;\n  }\n\n  // Declare our Heuristics\n  const heuristics = {\n    fieldType,\n    durationBool: stats.duration > 0,\n    countBool: stats.count <= internalOptions.maxCount,\n    notEmptyBool: stats.count > 0,\n    allEmptyVals: stats.max === 0 && stats.min === 0,\n    sqlExpressionBool: !!internalOptions.advancedQueryCapabilities && internalOptions.advancedQueryCapabilities.supportsSqlExpression,\n    maxRecordCountBool: recordCountBool(internalOptions.recordCount, internalOptions.maxRecordCount),\n    timeIntervalBool: !!getPeriodicTimeInterval(stats.min, stats.max)\n  };\n\n  return evaluatedHeuristics(heuristics);\n}\n\n// Determine if it can be charted...\n\nfunction evaluatedHeuristics (heuristics) {\n  if (isNumericType(heuristics.fieldType)) {\n    // If numeric check that duration is greater than 0 and count is greater than 0\n    return heuristics.durationBool && heuristics.notEmptyBool && !heuristics.allEmptyVals;\n  } else if (heuristics.fieldType === 'esriFieldTypeString') {\n    // If string check that duration is greater than 0 and count is greater than 0\n    // and that count is less than or equal to maxCount\n    return heuristics.countBool && heuristics.durationBool && heuristics.notEmptyBool;\n  } else if (heuristics.fieldType === 'esriFieldTypeDate') {\n    // If date check that duration is greater than 0 and count is greater than 0\n    // and that sqlExpressions are supported\n    return heuristics.notEmptyBool && heuristics.durationBool &&\n      (heuristics.sqlExpressionBool || heuristics.maxRecordCountBool) &&\n      heuristics.timeIntervalBool;\n  }\n\n  return false;\n}\n\n// return maxRecordCount boolean\nfunction recordCountBool (recordCount, maxRecordCount) {\n  return recordCount <= maxRecordCount && recordCount <= 10000;\n}\n","import isNumericType from './field/is-numeric-type';\nimport getPeriodicTimeInterval from './date/get-periodic-time-interval';\nimport shouldChartAttribute from './field/should-chart-attribute';\n\nexport default {\n  field: {\n    isNumericType,\n    shouldChartAttribute,\n    getPeriodicTimeInterval\n  }\n};\n"],"names":["const","let"],"mappings":"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"}